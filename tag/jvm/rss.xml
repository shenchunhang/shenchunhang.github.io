<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title> • Posts by &#34;jvm&#34; tag</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Thu, 18 Apr 2024 14:30:58 +0000</pubDate>
        <lastBuildDate>Thu, 18 Apr 2024 14:30:58 +0000</lastBuildDate>
        <category>超频</category>
        <category>硬件</category>
        <category>Intel</category>
        <category>i5-12400</category>
        <category>diy</category>
        <category>pc</category>
        <category>Docker</category>
        <category>Redis</category>
        <category>Windows</category>
        <category>安装教程</category>
        <category>hexo</category>
        <category>Shoka</category>
        <category>ShokaX</category>
        <category>mysql</category>
        <category>java</category>
        <category>定位</category>
        <category>struts2</category>
        <category>JVM</category>
        <category>源码</category>
        <category>websocket</category>
        <category>依赖升级</category>
        <category>安全漏洞</category>
        <category>性能优化</category>
        <category>垃圾回收</category>
        <category>工具</category>
        <category>github</category>
        <category>日常</category>
        <category>动漫</category>
        <item>
            <guid isPermalink="true">http://example.com/2024/04/18/websocketClient%E8%AE%B0%E5%BE%97close/</guid>
            <title>websocketClient记得close</title>
            <link>http://example.com/2024/04/18/websocketClient%E8%AE%B0%E5%BE%97close/</link>
            <category>java</category>
            <category>定位</category>
            <category>JVM</category>
            <pubDate>Thu, 18 Apr 2024 14:30:58 +0000</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;背景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;最近开发了一个特性，关于 websocket 的功能，代码量直接给感到了 5k, 联调都好了，程序就挂在服务器上，然后就没管了，今天发现这个服务器，卡卡的，一看 CPU 占用 500%, 惊了&lt;/p&gt;
&lt;h2 id=&#34;定位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定位&#34;&gt;#&lt;/a&gt; 定位&lt;/h2&gt;
&lt;h3 id=&#34;先看哪个线程这么吃cpu&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#先看哪个线程这么吃cpu&#34;&gt;#&lt;/a&gt; 先看哪个线程这么吃 CPU&lt;/h3&gt;
&lt;p&gt;top -Hp pid, 这个是查看线程，直接 top 显示的都是进程&lt;br&gt;
然后取 CPU 占用最高的一个，printf “% x\n” 线程号，&lt;br&gt;
 再用 jstack pid &amp;gt; stack.txt&lt;br&gt;
 在 stack.txt 里面检索一下，发现是 GC 的线程，看了 CPU 占用最高的几个线程，都是 GC 的，然后突然发现端倪，为什么 Thread-XXX 的线程这么多呢，有几千个，看栈帧，看线程名，只能知道是系统龙出来的，但是我自己弄的线程都是有给命名的，感觉很奇怪&lt;/p&gt;
&lt;h3 id=&#34;先看gc情况-判断是一直在gc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#先看gc情况-判断是一直在gc&#34;&gt;#&lt;/a&gt; 先看 GC 情况，判断是一直在 GC&lt;/h3&gt;
&lt;p&gt;用 jstat -gcutil pid 1000 10, 发现 FGC 很少，但是 YGC 却来得很多，还一直再增长，这种情况，没有 FGC, 一直 YGC, 那多半，并没有大对象，如果是大对象就直接进老年代，触发 FGC 了&lt;/p&gt;
&lt;h3 id=&#34;查看heapdump&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看heapdump&#34;&gt;#&lt;/a&gt; 查看 heapdump&lt;/h3&gt;
&lt;p&gt;本来准备先 jmap -heap pid 的，结果上传到服务器的 jdk 和 jre 版本不支持，索性直接 jmap -dump:format=b,file=home/xxx/pid.dump, 推荐用 mat（Memory Analyzer Tool）, visualvm, 还是太简陋了，不容易分析，大概看了一遍，没有自己封装的对象在，&lt;br&gt;
 然后我又检索了一下 websocket 的类名，发现 2000 多个，哦和，问题肯定出现在 new WebscoketClient 的地方，走读了一下代码，发现连接不通的时候没有 close, 导致 GC 一直不把他当成垃圾&lt;/p&gt;
&lt;h3 id=&#34;源码解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#源码解析&#34;&gt;#&lt;/a&gt; 源码解析&lt;/h3&gt;
&lt;p&gt;WebSocketClient 中有两个线程对象，&lt;br&gt;
private Thread writeThread;&lt;br&gt;
private Thread connectReadThread;&lt;br&gt;
 所以现象中有线程数爆炸，且命名也是系统给的，让人混淆&lt;br&gt;
再说为什么会有这么多自定义的 WebSocketClient 对象，因为代码终有重连机制&lt;br&gt;
改正也简单，加上 连接失败，机上 close 就可以了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
public abstract class WebSocketClient extends AbstractWebSocket implements Runnable, WebSocket {

&amp;#x2F;**
* The URI this channel is supposed to connect to.
*&amp;#x2F;
protected URI uri &amp;#x3D; null;

&amp;#x2F;**
* The underlying engine
*&amp;#x2F;
private WebSocketImpl engine &amp;#x3D; null;

&amp;#x2F;**
* The socket for this WebSocketClient
*&amp;#x2F;
private Socket socket &amp;#x3D; null;

&amp;#x2F;**
* The SocketFactory for this WebSocketClient
*
* @since 1.4.0
*&amp;#x2F;
private SocketFactory socketFactory &amp;#x3D; null;

&amp;#x2F;**
* The used OutputStream
*&amp;#x2F;
private OutputStream ostream;

&amp;#x2F;**
* The used proxy, if any
*&amp;#x2F;
private Proxy proxy &amp;#x3D; Proxy.NO_PROXY;

&amp;#x2F;**
* The thread to write outgoing message
*&amp;#x2F;
private Thread writeThread;

&amp;#x2F;**
* The thread to connect and read message
*&amp;#x2F;
private Thread connectReadThread;

&amp;#x2F;**
* The draft to use
*&amp;#x2F;
private Draft draft;

&amp;#x2F;**
* The additional headers to use
*&amp;#x2F;
private Map&amp;lt;String, String&amp;gt; headers;

&amp;#x2F;**
* The latch for connectBlocking()
*&amp;#x2F;
private CountDownLatch connectLatch &amp;#x3D; new CountDownLatch(1);

&amp;#x2F;**
* The latch for closeBlocking()
*&amp;#x2F;
private CountDownLatch closeLatch &amp;#x3D; new CountDownLatch(1);

&amp;#x2F;**
* The socket timeout value to be used in milliseconds.
*&amp;#x2F;
private int connectTimeout &amp;#x3D; 0;

&amp;#x2F;**
* DNS resolver that translates a URI to an InetAddress
*
* @see InetAddress
* @since 1.4.1
*&amp;#x2F;
private DnsResolver dnsResolver &amp;#x3D; null;&lt;/code&gt;&lt;/pre&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/05/20/%E5%AE%9A%E4%BD%8D-%E5%BA%94%E7%94%A8%E9%A2%91%E7%B9%81FGC/</guid>
            <title>定位和解决应用频繁Full GC问题</title>
            <link>http://example.com/2023/05/20/%E5%AE%9A%E4%BD%8D-%E5%BA%94%E7%94%A8%E9%A2%91%E7%B9%81FGC/</link>
            <category>java</category>
            <category>定位</category>
            <category>JVM</category>
            <category>性能优化</category>
            <category>垃圾回收</category>
            <pubDate>Sat, 20 May 2023 13:17:01 +0000</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;背景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;在话务量环境中，我们发现接口响应变慢。由于该环境中运行着多种业务，难以直接判断是哪个业务引发了这个问题。因此，我们需要进行深入的性能分析和问题定位。&lt;/p&gt;
&lt;h2 id=&#34;问题定位过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问题定位过程&#34;&gt;#&lt;/a&gt; 问题定位过程&lt;/h2&gt;
&lt;h3 id=&#34;1-使用jstat观察垃圾收集情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-使用jstat观察垃圾收集情况&#34;&gt;#&lt;/a&gt; 1. 使用 jstat 观察垃圾收集情况&lt;/h3&gt;
&lt;p&gt;首先，我们使用 &lt;code&gt;jstat -gcutil&lt;/code&gt;  命令查看垃圾收集的情况。观察结果显示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;老年代使用率较高&lt;/li&gt;
&lt;li&gt;GC 次数和时间明显偏多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些迹象表明系统可能正在频繁进行 Full GC。&lt;/p&gt;
&lt;h3 id=&#34;2-使用jmap分析堆内存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-使用jmap分析堆内存&#34;&gt;#&lt;/a&gt; 2. 使用 jmap 分析堆内存&lt;/h3&gt;
&lt;p&gt;接下来，我们使用 &lt;code&gt;jmap -heap &amp;lt;pid&amp;gt;&lt;/code&gt;  命令查看堆内存使用情况，发现内存使用量确实很高。&lt;/p&gt;
&lt;p&gt;为了进一步分析，我们执行了以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;手动触发一次 Full GC： &lt;code&gt;jmap -histo:live &amp;lt;pid&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再次执行 &lt;code&gt;jmap -heap &amp;lt;pid&amp;gt;&lt;/code&gt;  查看堆内存情况&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;执行完后，再执行 &lt;code&gt;jmap -heap &amp;lt;pid&amp;gt;&lt;/code&gt; ，没有发现明显变化。&lt;/p&gt;
&lt;p&gt;这时我们推测，JVM 中可能没有多少可回收的垃圾，问题可能出在某个业务模块使用了大量缓存（如 Map 等数据结构）。不过，这个结论还不够确定，因为 &lt;code&gt;jmap -histo:live&lt;/code&gt;  的结果可能受到正在执行的线程影响，这一步得出的结论还不足以定位出具体是哪一块的问题。&lt;/p&gt;
&lt;h3 id=&#34;3-分析堆转储文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-分析堆转储文件&#34;&gt;#&lt;/a&gt; 3. 分析堆转储文件&lt;/h3&gt;
&lt;p&gt;为了获得更详细的信息，我们决定生成堆转储文件进行分析：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jmap -dump:format=b,file=/home/xxx/sch/my.dump &amp;lt;pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们使用 VisualVM 分析 dump 文件（也可以使用 MAT）。分析结果显示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;  对象数量异常多&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SimpleMessage&lt;/code&gt;  对象数量异常多&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LinkedBlockingQueue$Node&lt;/code&gt;  对象数量异常多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过代码审查，我们发现这些对象与线程池的任务队列有关。进一步分析发现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用了无界队列&lt;/li&gt;
&lt;li&gt;消费速度跟不上生产速度&lt;/li&gt;
&lt;li&gt;队列中积压了大量任务，从而触发频繁的 Full GC&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们意识到，如果继续这样下去，很可能会导致 OutOfMemoryError。&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决方案&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h2&gt;
&lt;p&gt;问题定位后，我们考虑了以下解决方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改队列类型：考虑到原设计可能有其合理性，我们暂时没有采取这个方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化任务处理逻辑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将原来使用 &lt;code&gt;synchronized&lt;/code&gt;  的地方改为使用 &lt;code&gt;Lock&lt;/code&gt; ，降低锁的粒度。&lt;/li&gt;
&lt;li&gt;实现批量处理逻辑：当队列中任务数量超过阈值时，启用批量处理模式，提高处理效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实施步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们首先在话务量环境中部署了第一个优化方案（使用 &lt;code&gt;Lock&lt;/code&gt;  替换 &lt;code&gt;synchronized&lt;/code&gt; ）。&lt;/li&gt;
&lt;li&gt;验证没有问题后，这解决了紧急情况。&lt;/li&gt;
&lt;li&gt;随后，我们又实现并部署了批量处理的优化，进一步提升了系统性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这次问题的解决过程展示了系统性能优化的一般步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发现问题：监控系统性能指标。&lt;/li&gt;
&lt;li&gt;初步分析：使用 JVM 工具如 &lt;code&gt;jstat&lt;/code&gt;  和 &lt;code&gt;jmap&lt;/code&gt;  快速定位可能的问题区域。&lt;/li&gt;
&lt;li&gt;深入分析：生成并分析堆转储文件，结合代码审查找出根本原因。&lt;/li&gt;
&lt;li&gt;制定方案：根据分析结果设计优化方案。&lt;/li&gt;
&lt;li&gt;逐步实施：先解决紧急问题，然后进行进一步的优化。&lt;/li&gt;
&lt;li&gt;持续监控：部署优化方案后继续监控系统，确保问题得到解决。&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
    </channel>
</rss>
