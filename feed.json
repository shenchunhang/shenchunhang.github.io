{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/06/09/12400-OC/",
            "url": "http://example.com/2024/06/09/12400-OC/",
            "title": "Intel i5-12400 超频指南",
            "date_published": "2024-06-09T16:32:21.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>最近电商 618 活动，12600KF 价格非常诱人，叠加优惠券只需 820 元。虽然很想入手，但考虑到我使用双屏且不喜欢关机，还是决定保留核显以降低待机功耗。因此，我们今天来探讨如何将 i5-12400 超频到接近 12600K 的性能水平。</p>\n\n<h2 id=\"系统配置\"><a class=\"markdownIt-Anchor\" href=\"#系统配置\">#</a> 系统配置</h2>\n<ul>\n<li>操作系统: Windows 11 专业版 64 位 (版本 22631.3737, 23H2)</li>\n<li>处理器: Intel Core i5-12400 (6 核 12 线程，Intel 7 工艺)</li>\n<li>显卡:\n<ul>\n<li>集成显卡: Intel UHD Graphics 730</li>\n<li>独立显卡: NVIDIA GeForce RTX 2080 Ti (11GB GDDR6)</li>\n</ul>\n</li>\n<li>主板: MSI MAG B660M MORTAR MAX WIFI DDR4 (MS-7D97)</li>\n<li>存储:\n<ul>\n<li>SAMSUNG MZVL2512HCJQ-00B00 SSD (477GB)</li>\n<li>ZHITAI TiPlus5000 1TB SSD (954GB)</li>\n<li>Seagate ST4000VX015-3CU104 HDD (3.64TB)</li>\n</ul>\n</li>\n<li>显示器: 27 英寸，2560x1600 分辨率，120Hz 刷新率</li>\n<li>内存: 32GB (4x8GB) Tanbassh DDR4-3603 (实际运行于 3834MHz, 时序 17-20-20-40 2T)</li>\n</ul>\n\n<h2 id=\"超频准备\"><a class=\"markdownIt-Anchor\" href=\"#超频准备\">#</a> 超频准备</h2>\n<h3 id=\"主板要求\"><a class=\"markdownIt-Anchor\" href=\"#主板要求\">#</a> 主板要求</h3>\n<p>由于我们将通过提升外频来增加 CPU 主频，因此主板必须支持外频调整。本指南基于微星 (MSI) 主板 BIOS 进行，请确保您的主板具有类似功能。</p>\n\n<h2 id=\"超频步骤\"><a class=\"markdownIt-Anchor\" href=\"#超频步骤\">#</a> 超频步骤</h2>\n<ol>\n<li>\n<p>进入 BIOS, 将 CPU 频率调整至目标值 (本例中为 5000MHz)。</p>\n</li>\n<li>\n<p>调整 P-CORE 倍频 (通常默认为 40)。</p>\n</li>\n<li>\n<p>在 &quot;Advanced CPU Configuration&quot; 中:</p>\n<ul>\n<li>禁用 Intel C-State</li>\n<li>禁用 Intel Speed Shift Technology</li>\n<li>根据散热器选择合适的功耗墙设置 (建议选择水冷)</li>\n</ul>\n</li>\n</ol>\n\n<ol start=\"4\">\n<li>\n<p>将 &quot;Microcode Selection&quot; 设置为 &quot;Non K OC&quot;。</p>\n</li>\n<li>\n<p>将 CPU 基频从 100MHz 提升至 125MHz (提升 25%)。</p>\n</li>\n<li>\n<p>降低 Ring 倍频至 33, 使 Ring 频率约为 4125MHz (通常保持在主频 - 1GHz 左右)。</p>\n</li>\n<li>\n<p>调整 GT 倍频 (核显), 使其频率与原始设置相近，本例中设为 23。</p>\n</li>\n<li>\n<p>在 &quot;CPU Cooler Tuning&quot; 中选择水冷，以最大化功耗限制。</p>\n</li>\n<li>\n<p>在 &quot;数位电压设置&quot; 中:</p>\n<ul>\n<li>将 CPU 负载线校准 (LLC) 设置为 Mode 3 或 Mode 4</li>\n<li>初始 CPU Core 电压设置为 1.2V</li>\n</ul>\n</li>\n</ol>\n\n<ol start=\"10\">\n<li>\n<p>手动调整内存设置，恢复至原始参数 (通常为 DDR4-3200 CL18)。</p>\n</li>\n<li>\n<p>保存设置并进入系统，使用 CPU-Z 验证更改是否生效。</p>\n</li>\n</ol>\n\n<ol start=\"12\">\n<li>\n<p>进行稳定性测试:</p>\n<ul>\n<li>首先运行 Cinebench R23 (中等压力测试)</li>\n<li>如遇蓝屏，逐步增加 CPU 电压 (每次 + 0.02V) 直至稳定</li>\n</ul>\n</li>\n<li>\n<p>通过 Cinebench R23 后，运行 Cinebench R15 (高压力测试):</p>\n<ul>\n<li>蓝屏时增加电压 (每次 + 0.01V)</li>\n<li>稳定后尝试降低电压 (每次 - 0.01V), 直到找到最低稳定电压</li>\n</ul>\n</li>\n<li>\n<p>确定最低稳定电压后，建议额外增加 0.03-0.04V 作为安全裕度，以确保长期稳定性。</p>\n</li>\n</ol>\n\n<h2 id=\"性能提升\"><a class=\"markdownIt-Anchor\" href=\"#性能提升\">#</a> 性能提升</h2>\n<p>// TODO: 添加超频前后的性能对比数据</p>\n\n<h2 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h2>\n<ol>\n<li>超频可能会导致处理器寿命缩短，请谨慎操作。</li>\n<li>确保有足够的散热能力，建议使用高质量散热器。</li>\n<li>超频可能会影响系统稳定性，请进行充分的稳定性测试。</li>\n<li>不同的 CPU 样品可能有不同的超频潜力，您的结果可能与本指南有所不同。</li>\n</ol>\n\n<h2 id=\"结语\"><a class=\"markdownIt-Anchor\" href=\"#结语\">#</a> 结语</h2>\n<p>通过适当的超频，我们可以将 i5-12400 的性能提升到接近 12600K 的水平，同时保留了核显的优势。希望本指南能够帮助您充分发挥处理器的潜力。如有任何问题，欢迎在评论区讨论。</p>\n",
            "tags": [
                "超频",
                "硬件",
                "Intel",
                "i5-12400"
            ]
        },
        {
            "id": "http://example.com/2024/05/15/hexo-Shoka%E5%8D%87%E7%BA%A7%E5%88%B0ShokaX/",
            "url": "http://example.com/2024/05/15/hexo-Shoka%E5%8D%87%E7%BA%A7%E5%88%B0ShokaX/",
            "title": "[hexo] Shoka升级到ShokaX",
            "date_published": "2024-05-15T14:48:12.000Z",
            "content_html": "<h2 id=\"shoka升级\"><a class=\"markdownIt-Anchor\" href=\"#shoka升级\">#</a> Shoka 升级</h2>\n<p>玩 blog 开始就用的 Shoka, 一直都没管主题，今天偶然发现别人的 Shoka 和我的长得有点区别，看页脚，ShokaX, 诶诶，居然有 ShokaX,<br>\n 随后检索，发现原来 Shoka 已经停更了三年了<br>\n看了一下 ShokaX, 感觉优化了不少东西，直接升呗</p>\n<pre><code>\nnpm -g install shokax-cli\nSXC install shokaX -pm npm</code></pre>\n<h3 id=\"sxec-102-critical-rendering-plugins-are-missing-or-incorrectly-configured\"><a class=\"markdownIt-Anchor\" href=\"#sxec-102-critical-rendering-plugins-are-missing-or-incorrectly-configured\">#</a> [SXEC 102] Critical rendering plugins are missing or incorrectly configured.</h3>\n<p>此代码代表包安装不完整，关键插件未安装，可能导致显示错误和性能下降等问题。<br>\n重新执行一下</p>\n<pre><code>SXC install shokaX</code></pre>\n<h3 id=\"sxec-201-essential-informationtitle-desc-lang-etc-config-incorrectly-page-will-render-incorrectly\"><a class=\"markdownIt-Anchor\" href=\"#sxec-201-essential-informationtitle-desc-lang-etc-config-incorrectly-page-will-render-incorrectly\">#</a> [SXEC 201] Essential information(title, desc, lang, etc) config incorrectly, Page will render incorrectly</h3>\n<p>Hexo 配置中的关键信息缺失，包括站点标题、站点描述、站点语言、站点时区和站点 URL。</p>\n<h3 id=\"代码块样式也变了\"><a class=\"markdownIt-Anchor\" href=\"#代码块样式也变了\">#</a> 代码块样式也变了</h3>\n<p>看了一下官方，原来大家都遇到过这个问题<br>\n<a href=\"https://github.com/theme-shoka-x/hexo-theme-shokaX/discussions/243\"> https://github.com/theme-shoka-x/hexo-theme-shokaX/discussions/243</a></p>\n<h3 id=\"github的deploy报错\"><a class=\"markdownIt-Anchor\" href=\"#github的deploy报错\">#</a> github 的 deploy 报错</h3>\n<pre><code>  hexo clean\n  hexo generate\n  shell: /usr/bin/bash -e &#123;0&#125;\nINFO  Validating config\nINFO  Validating config\nINFO  Start processing\nPrism's Diff Highlight plugin requires the Diff language definition (prism-diff.js).Make sure the language definition is loaded or use Prism's Autoloader plugin.\nWARN  The the WebP converter can not run correctly when you run hexo g after hexo cl, please run the hexo g again\nINFO  Files loaded in 1.46 s\nnode:internal/deps/undici/undici:12502\n      Error.captureStackTrace(err, this);\n            ^\n\nTypeError: fetch failed\n    at node:internal/deps/undici/undici:12502:13\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) &#123;\n  [cause]: AggregateError [ETIMEDOUT]: \n      at internalConnectMultiple (node:net:1117:18)\n      at internalConnectMultiple (node:net:1185:5)\n      at Timeout.internalConnectMultipleTimeout (node:net:1711:5)\n      at listOnTimeout (node:internal/timers:575:11)\n      at process.processTimers (node:internal/timers:514:7) &#123;\n    code: 'ETIMEDOUT',\n    [errors]: [\n      Error: connect ETIMEDOUT 116.253.29.204:443\n          at createConnectionError (node:net:1647:14)\n          at Timeout.internalConnectMultipleTimeout (node:net:1706:38)\n          at listOnTimeout (node:internal/timers:575:11)\n          at process.processTimers (node:internal/timers:514:7) &#123;\n        errno: -110,\n        code: 'ETIMEDOUT',\n        syscall: 'connect',\n        address: '116.253.29.204',\n        port: 443\n      &#125;,\n      Error: connect ENETUNREACH 2409:8c34:2220:b:3::3fb:443 - Local (:::0)\n          at internalConnectMultiple (node:net:1181:16)\n          at Timeout.internalConnectMultipleTimeout (node:net:1711:5)\n          at listOnTimeout (node:internal/timers:575:11)\n          at process.processTimers (node:internal/timers:514:7) &#123;\n        errno: -101,\n        code: 'ENETUNREACH',\n        syscall: 'connect',\n        address: '2409:8c34:2220:b:3::3fb',\n        port: 443\n      &#125;\n    ]\n  &#125;\n&#125;\n\nNode.js v20.13.1\nError: Process completed with exit code 1.\n</code></pre>\n<p>虽然不懂 nodejs, 但是看日志报错，是连接失败，推断是代理，github 用的是 node 默认的镜像源<br>\n本地的镜像源: <a href=\"https://registry.npmmirror.com\">https://registry.npmmirror.com</a> (我挂了代理)<br>\n github 默认: <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a><br>\n 所以直接在报错的命令那里加了一个切换镜像源的命令</p>\n<pre><code>    - name: 切换代理\n      run: |\n        npm config get registry\n        npm config set registry http://registry.npm.taobao.com\n\n    - name: 生成静态文件\n      run: |\n        hexo clean\n        hexo generate\n</code></pre>\n<h3 id=\"大标题失效alternate\"><a class=\"markdownIt-Anchor\" href=\"#大标题失效alternate\">#</a> 大标题失效 alternate</h3>\n<p>_config.shokaX.yml 中 alternate 失效<br>\n本地可以，但是 github 上却还是显示为</p>\n\n<p>可能是你的主题配置文件名称的问题<br>\n_config.shokaX.yml 改为_config.shokax.yml<br>\n 本地是 windows, 而服务器是 linux</p>\n<h2 id=\"体验\"><a class=\"markdownIt-Anchor\" href=\"#体验\">#</a> 体验</h2>\n",
            "tags": [
                "hexo",
                "Shoka",
                "ShokaX"
            ]
        },
        {
            "id": "http://example.com/2024/04/22/websocket%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E4%BB%B6%E5%8D%87%E7%BA%A7/",
            "url": "http://example.com/2024/04/22/websocket%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E4%BB%B6%E5%8D%87%E7%BA%A7/",
            "title": "websocket三方开源件升级经验分享",
            "date_published": "2024-04-22T13:28:34.000Z",
            "content_html": "<h2 id=\"背景介绍\"><a class=\"markdownIt-Anchor\" href=\"#背景介绍\">#</a> 背景介绍</h2>\n<p>在一个项目中，我们使用了其他同事提供的 websocket 代码。项目接近测试结束阶段时，我对代码进行了审查，发现 IDE 提示当前使用的 websocket 版本存在 CVE 漏洞。起初认为这可能只是一个小问题，只需要简单地升级版本就能解决。然而，事实证明这个过程比预想的要复杂得多。</p>\n<h2 id=\"使用的开源组件orgjava-websocket\"><a class=\"markdownIt-Anchor\" href=\"#使用的开源组件orgjava-websocket\">#</a> 使用的开源组件：org.java-websocket</h2>\n<p>原始依赖版本是 1.3.0：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.java-websocket<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>Java-WebSocket<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"升级过程中遇到的主要问题\"><a class=\"markdownIt-Anchor\" href=\"#升级过程中遇到的主要问题\">#</a> 升级过程中遇到的主要问题</h2>\n<p>当我尝试将版本直接升级到最新的 1.5.6 时，遇到了两个主要问题：</p>\n<ol>\n<li>API 发生变化</li>\n<li>信任所有证书的方法报错</li>\n</ol>\n<h3 id=\"1-api变化\"><a class=\"markdownIt-Anchor\" href=\"#1-api变化\">#</a> 1. API 变化</h3>\n<p>升级前后的代码对比：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 升级前</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">MyWebsocketClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyWebsocketClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URI</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Draft_76</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">SSLContext</span> sc <span class=\"token operator\">=</span> <span class=\"token class-name\">SSLContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TLS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sc<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>kmf<span class=\"token punctuation\">.</span><span class=\"token function\">getKeyManagers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tmf<span class=\"token punctuation\">.</span><span class=\"token function\">getTrustManagers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>client<span class=\"token punctuation\">.</span><span class=\"token function\">setWebSocketFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultSSLWebSocketServerFactory</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 升级后</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">MyWebsocketClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyWebsocketClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URI</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Draft_6455</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">SSLContext</span> sc <span class=\"token operator\">=</span> <span class=\"token class-name\">SSLContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TLS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sc<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> trustAllCerts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span>SecureRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>client<span class=\"token punctuation\">.</span><span class=\"token function\">setSocketFactory</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">.</span><span class=\"token function\">getSocketFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>主要变化：</p>\n<ul>\n<li><code>setWebSocketFactory()</code>  方法变为  <code>setSocketFactory()</code></li>\n<li><code>Draft_76</code>  更新为  <code>Draft_6455</code></li>\n</ul>\n<p>通过查看 GitHub 上的官方示例和 git 记录，我发现 API 经历了以下变化：</p>\n<ol>\n<li><code>chatclient.setWebSocketFactory(new SSLWebSocketClientFactory(sslContext));</code></li>\n<li><code>chatclient.setSocket(factory.createSocket());</code></li>\n<li><code>chatclient.setSocketFactory(factory);</code></li>\n</ol>\n<h3 id=\"2-信任所有证书报错\"><a class=\"markdownIt-Anchor\" href=\"#2-信任所有证书报错\">#</a> 2. 信任所有证书报错</h3>\n<p>升级后，日志中出现了证书校验的报错。通过源码分析，发现问题出在 <code>chooseTrustManager</code>  方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">X509TrustManager</span> <span class=\"token function\">chooseTrustManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TrustManager</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 代码省略...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbstractTrustManagerWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">X509TrustManager</span><span class=\"token punctuation\">)</span>tm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个方法返回的 <code>AbstractTrustManagerWrapper</code>  包含了证书校验逻辑，而不是使用我们自定义的 <code>X509TrustManager</code> 。</p>\n<h2 id=\"解决方案\"><a class=\"markdownIt-Anchor\" href=\"#解决方案\">#</a> 解决方案</h2>\n<p>为了解决这个问题，我们需要实现 <code>X509ExtendedTrustManager</code>  接口。以下是修改后的代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyWebsocketClient</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">generateWebsocketClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> uri<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">URISyntaxException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">MyWebsocketClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyWebsocketClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URI</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Draft_6455</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">TrustManager</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> trustAllCerts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TrustManager</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">X509ExtendedTrustManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkClientTrusted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">X509Certificate</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chain<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> authType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CertificateException</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkServerTrusted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">X509Certificate</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chain<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> authType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CertificateException</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token class-name\">X509Certificate</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getAcceptedIssuers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">X509Certificate</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkClientTrusted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">X509Certificate</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chain<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> authType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Socket</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CertificateException</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkServerTrusted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">X509Certificate</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chain<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> authType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Socket</span> socket<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CertificateException</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkClientTrusted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">X509Certificate</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chain<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> authType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SSLEngine</span> engine<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CertificateException</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkServerTrusted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">X509Certificate</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chain<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> authType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SSLEngine</span> engine<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CertificateException</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">SSLContext</span> sc <span class=\"token operator\">=</span> <span class=\"token class-name\">SSLContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SSL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        sc<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> trustAllCerts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span>SecureRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        client<span class=\"token punctuation\">.</span><span class=\"token function\">setSocketFactory</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">.</span><span class=\"token function\">getSocketFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchAlgorithmException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">KeyManagementException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">boolean</span> connected <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        connected <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">connectBlocking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connectBlocking fail\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>connected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ol>\n<li>升级第三方依赖时，要仔细查看更新日志和 API 变化。</li>\n<li>对于安全相关的更改，如 SSL/TLS 配置，需要特别注意。</li>\n<li>在升级过程中，逐步测试每个变更是很重要的。</li>\n<li>保持与开源社区的最新动态同步，可以帮助我们更好地理解和应对 API 变化。</li>\n</ol>\n",
            "tags": [
                "java",
                "源码",
                "websocket",
                "依赖升级",
                "安全漏洞"
            ]
        },
        {
            "id": "http://example.com/2024/04/21/max-http-header-size%E5%BC%95%E8%B5%B7%E7%9A%84OOM/",
            "url": "http://example.com/2024/04/21/max-http-header-size%E5%BC%95%E8%B5%B7%E7%9A%84OOM/",
            "title": "max-http-header-size引起的OOM",
            "date_published": "2024-04-21T15:13:22.000Z",
            "content_html": "",
            "tags": [
                "java",
                "定位"
            ]
        },
        {
            "id": "http://example.com/2024/04/18/websocketClient%E8%AE%B0%E5%BE%97close/",
            "url": "http://example.com/2024/04/18/websocketClient%E8%AE%B0%E5%BE%97close/",
            "title": "websocketClient记得close",
            "date_published": "2024-04-18T14:30:58.000Z",
            "content_html": "<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\">#</a> 背景</h2>\n<p>最近开发了一个特性，关于 websocket 的功能，代码量直接给感到了 5k, 联调都好了，程序就挂在服务器上，然后就没管了，今天发现这个服务器，卡卡的，一看 CPU 占用 500%, 惊了</p>\n<h2 id=\"定位\"><a class=\"markdownIt-Anchor\" href=\"#定位\">#</a> 定位</h2>\n<h3 id=\"先看哪个线程这么吃cpu\"><a class=\"markdownIt-Anchor\" href=\"#先看哪个线程这么吃cpu\">#</a> 先看哪个线程这么吃 CPU</h3>\n<p>top -Hp pid, 这个是查看线程，直接 top 显示的都是进程<br>\n然后取 CPU 占用最高的一个，printf “% x\\n” 线程号，<br>\n 再用 jstack pid &gt; stack.txt<br>\n 在 stack.txt 里面检索一下，发现是 GC 的线程，看了 CPU 占用最高的几个线程，都是 GC 的，然后突然发现端倪，为什么 Thread-XXX 的线程这么多呢，有几千个，看栈帧，看线程名，只能知道是系统龙出来的，但是我自己弄的线程都是有给命名的，感觉很奇怪</p>\n<h3 id=\"先看gc情况-判断是一直在gc\"><a class=\"markdownIt-Anchor\" href=\"#先看gc情况-判断是一直在gc\">#</a> 先看 GC 情况，判断是一直在 GC</h3>\n<p>用 jstat -gcutil pid 1000 10, 发现 FGC 很少，但是 YGC 却来得很多，还一直再增长，这种情况，没有 FGC, 一直 YGC, 那多半，并没有大对象，如果是大对象就直接进老年代，触发 FGC 了</p>\n<h3 id=\"查看heapdump\"><a class=\"markdownIt-Anchor\" href=\"#查看heapdump\">#</a> 查看 heapdump</h3>\n<p>本来准备先 jmap -heap pid 的，结果上传到服务器的 jdk 和 jre 版本不支持，索性直接 jmap -dump:format=b,file=home/xxx/pid.dump, 推荐用 mat（Memory Analyzer Tool）, visualvm, 还是太简陋了，不容易分析，大概看了一遍，没有自己封装的对象在，<br>\n 然后我又检索了一下 websocket 的类名，发现 2000 多个，哦和，问题肯定出现在 new WebscoketClient 的地方，走读了一下代码，发现连接不通的时候没有 close, 导致 GC 一直不把他当成垃圾</p>\n<h3 id=\"源码解析\"><a class=\"markdownIt-Anchor\" href=\"#源码解析\">#</a> 源码解析</h3>\n<p>WebSocketClient 中有两个线程对象，<br>\nprivate Thread writeThread;<br>\nprivate Thread connectReadThread;<br>\n 所以现象中有线程数爆炸，且命名也是系统给的，让人混淆<br>\n再说为什么会有这么多自定义的 WebSocketClient 对象，因为代码终有重连机制<br>\n改正也简单，加上 连接失败，机上 close 就可以了</p>\n<pre><code>\npublic abstract class WebSocketClient extends AbstractWebSocket implements Runnable, WebSocket {\n\n&#x2F;**\n* The URI this channel is supposed to connect to.\n*&#x2F;\nprotected URI uri &#x3D; null;\n\n&#x2F;**\n* The underlying engine\n*&#x2F;\nprivate WebSocketImpl engine &#x3D; null;\n\n&#x2F;**\n* The socket for this WebSocketClient\n*&#x2F;\nprivate Socket socket &#x3D; null;\n\n&#x2F;**\n* The SocketFactory for this WebSocketClient\n*\n* @since 1.4.0\n*&#x2F;\nprivate SocketFactory socketFactory &#x3D; null;\n\n&#x2F;**\n* The used OutputStream\n*&#x2F;\nprivate OutputStream ostream;\n\n&#x2F;**\n* The used proxy, if any\n*&#x2F;\nprivate Proxy proxy &#x3D; Proxy.NO_PROXY;\n\n&#x2F;**\n* The thread to write outgoing message\n*&#x2F;\nprivate Thread writeThread;\n\n&#x2F;**\n* The thread to connect and read message\n*&#x2F;\nprivate Thread connectReadThread;\n\n&#x2F;**\n* The draft to use\n*&#x2F;\nprivate Draft draft;\n\n&#x2F;**\n* The additional headers to use\n*&#x2F;\nprivate Map&lt;String, String&gt; headers;\n\n&#x2F;**\n* The latch for connectBlocking()\n*&#x2F;\nprivate CountDownLatch connectLatch &#x3D; new CountDownLatch(1);\n\n&#x2F;**\n* The latch for closeBlocking()\n*&#x2F;\nprivate CountDownLatch closeLatch &#x3D; new CountDownLatch(1);\n\n&#x2F;**\n* The socket timeout value to be used in milliseconds.\n*&#x2F;\nprivate int connectTimeout &#x3D; 0;\n\n&#x2F;**\n* DNS resolver that translates a URI to an InetAddress\n*\n* @see InetAddress\n* @since 1.4.1\n*&#x2F;\nprivate DnsResolver dnsResolver &#x3D; null;</code></pre>",
            "tags": [
                "java",
                "定位",
                "JVM"
            ]
        },
        {
            "id": "http://example.com/2024/03/22/struts2%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0-%E5%8F%AA%E8%83%BD%E6%8E%A5%E6%94%B6256%E4%B8%AA/",
            "url": "http://example.com/2024/03/22/struts2%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0-%E5%8F%AA%E8%83%BD%E6%8E%A5%E6%94%B6256%E4%B8%AA/",
            "title": "struts2集合参数-只能接收256个",
            "date_published": "2024-03-22T13:47:32.000Z",
            "content_html": "<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\">#</a> 背景</h2>\n<p>测试那边转过来一个问题单，开发这边初步定位是 struts 框架接收集合参数只能接收到 256 个</p>\n<h2 id=\"定位\"><a class=\"markdownIt-Anchor\" href=\"#定位\">#</a> 定位</h2>\n<h3 id=\"google一下\"><a class=\"markdownIt-Anchor\" href=\"#google一下\">#</a> google 一下</h3>\n<p>先直接 google 了一下，感觉回答有点偏，说是 struts2.5.15 升级到 2.5.30 就会有这个问题，是 struts 改用 ArrayList 的 TypeConverter, 我自己去代码里面看根本咩有限制</p>\n<pre><code>\npublic Object convertValue(Map&lt;String, Object&gt; context, Object target, Member member, String propertyName, Object value, Class toType) {\nCollection result;\nClass memberType &#x3D; String.class;\n    if (target !&#x3D; null) {\n        memberType &#x3D; objectTypeDeterminer.getElementClass(target.getClass(), propertyName, null);\n        if (memberType &#x3D;&#x3D; null) {\n            memberType &#x3D; String.class;\n        }\n    }\n    if (toType.isAssignableFrom(value.getClass())) {\n        &#x2F;&#x2F; no need to do anything\n        result &#x3D; (Collection) value;\n    } else if (value.getClass().isArray()) {\n        Object[] objArray &#x3D; (Object[]) value;\n        TypeConverter converter &#x3D; getTypeConverter(context);\n        result &#x3D; createCollection(toType, memberType, objArray.length);\n        for (Object anObjArray : objArray) {\n            Object convertedValue &#x3D; converter.convertValue(context, target, member, propertyName, anObjArray, memberType);\n            if (!TypeConverter.NO_CONVERSION_POSSIBLE.equals(convertedValue)) {\n                result.add(convertedValue);\n            }\n        }\n    } else if (Collection.class.isAssignableFrom(value.getClass())) {\n        Collection col &#x3D; (Collection) value;\n        TypeConverter converter &#x3D; getTypeConverter(context);\n        result &#x3D; createCollection(toType, memberType, col.size());\n        for (Object aCol : col) {\n            Object convertedValue &#x3D; converter.convertValue(context, target, member, propertyName, aCol, memberType);\n            if (!TypeConverter.NO_CONVERSION_POSSIBLE.equals(convertedValue)) {\n                result.add(convertedValue);\n            }\n        }\n    } else {\n        result &#x3D; createCollection(toType, memberType, -1);\n        TypeConverter converter &#x3D; getTypeConverter(context);\n        Object convertedValue &#x3D; converter.convertValue(context, target, member, propertyName, value, memberType);\n        if (!TypeConverter.NO_CONVERSION_POSSIBLE.equals(convertedValue)) {\n            result.add(convertedValue);\n        }\n    }\n    return result;\n}</code></pre>\n<h4 id=\"strutsognlexpressionmaxlength\"><a class=\"markdownIt-Anchor\" href=\"#strutsognlexpressionmaxlength\">#</a> struts.ognl.expressionMaxLength</h4>\n<p>这时候就这专门去 clone 了一下 struts 的仓库<br>\n先切换到 2.5.33 版本，然后曲剧检索了一下 256, 还真让找到了一处配置</p>\n<img loading=\"lazy\" data-src=\"/2024/03/22/struts2%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0-%E5%8F%AA%E8%83%BD%E6%8E%A5%E6%94%B6256%E4%B8%AA/Snipaste_2024-04-22_22-01-35.png\" class=\"\" title=\"struts.ognl.expressionMaxLength\">\n<p>但是被注释掉了，翻译过来，不配置的话，就不会被限制，实际情况，本来就没有设置这个参数，应该和在这个配置没有关系，而且实际给的参数列表超过了 256, 这个参数是接收 OGNL 的个数，我们出现的问题是 OGNL 集合参数被限制在 256 以内，</p>\n<h4 id=\"strutsognlautogrowthcollectionlimit\"><a class=\"markdownIt-Anchor\" href=\"#strutsognlautogrowthcollectionlimit\">#</a> struts.ognl.autoGrowthCollectionLimit</h4>\n<p>无奈，只得继续看提交记录，好在提交记录 并不是很多，看着看着，又发现了一处</p>\n<pre><code>\npublic Object getProperty(Map context, Object target, Object name) throws OgnlException {\n    if (ReflectionContextState.isGettingByKeyProperty(context)\n            || name.equals(XWorkCollectionPropertyAccessor.KEY_PROPERTY_FOR_CREATION)) {\n        return _sAcc.getProperty(context, target, name);\n    } else if (name instanceof String) {\n        return super.getProperty(context, target, name);\n    }\n    ReflectionContextState.updateCurrentPropertyPath(context, name);\n    Class lastClass &#x3D; (Class) context.get(XWorkConverter.LAST_BEAN_CLASS_ACCESSED);\n    String lastProperty &#x3D; (String) context.get(XWorkConverter.LAST_BEAN_PROPERTY_ACCESSED);\n    \n    if (name instanceof Number\n            &amp;&amp; ReflectionContextState.isCreatingNullObjects(context)\n            &amp;&amp; objectTypeDeterminer.shouldCreateIfNew(lastClass,lastProperty,target,null,true)) {\n\n        List list &#x3D; (List) target;\n        int index &#x3D; ((Number) name).intValue();\n        int listSize &#x3D; list.size();\n\n        if (lastClass &#x3D;&#x3D; null || lastProperty &#x3D;&#x3D; null) {\n            return super.getProperty(context, target, name);\n        }\n        Class beanClass &#x3D; objectTypeDeterminer.getElementClass(lastClass, lastProperty, name);\n        if (listSize &lt;&#x3D; index) {\n            Object result;\n            if (index &gt; autoGrowCollectionLimit) {\n                throw new OgnlException(&quot;Error auto growing collection size to &quot; + index + &quot; which limited to &quot;\n                                        + autoGrowCollectionLimit);\n            }\n            for (int i &#x3D; listSize; i &lt; index; i++) {\n                list.add(null);\n            }\n            try {\n                list.add(index, result &#x3D; objectFactory.buildBean(beanClass, context));\n            } catch (Exception exc) {\n                throw new XWorkException(exc);\n            }\n            return result;\n        } else if (list.get(index) &#x3D;&#x3D; null) {\n            Object result;\n            try {\n                list.set(index, result &#x3D; objectFactory.buildBean(beanClass, context));\n            } catch (Exception exc) {\n                throw new XWorkException(exc);\n            }\n            return result;\n        }\n    }\n    return super.getProperty(context, target, name);\n}</code></pre>\n<img loading=\"lazy\" data-src=\"/2024/03/22/struts2%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0-%E5%8F%AA%E8%83%BD%E6%8E%A5%E6%94%B6256%E4%B8%AA/Snipaste_2024-04-22_22-28-18.png\" class=\"\" title=\"struts.ognl.autoGrowthCollectionLimit\">\n<p>早知道就一起检索 255 了，还看了这么多提交记录，这次直接到 struts 的配置里面加上，测试了一下，果然可以</p>\n<h4 id=\"吐槽\"><a class=\"markdownIt-Anchor\" href=\"#吐槽\">#</a> 吐槽</h4>\n<p>struts 真的可以，增加了 default 配置，也不写到版本更新里面去，还得自己来看源码才能知道</p>\n<h4 id=\"推想\"><a class=\"markdownIt-Anchor\" href=\"#推想\">#</a> 推想</h4>\n<p>struts.ognl.expressionMaxLength 这个配置，看了一下他们的 issue, 还是感觉挺好笑的，2.5.21 加上后，2.5.22 又给注释掉，实际外发的版本 2.5.21 都没了，<br>\n<a href=\"https://github.com/apache/struts/pull/380\">struts.ognl.expressionMaxLength 讨论</a></p>\n<img loading=\"lazy\" data-src=\"/2024/03/22/struts2%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0-%E5%8F%AA%E8%83%BD%E6%8E%A5%E6%94%B6256%E4%B8%AA/Snipaste_2024-04-22_22-44-21.png\" class=\"\" title=\"2.5.21缺失\">",
            "tags": [
                "java",
                "定位",
                "struts2"
            ]
        },
        {
            "id": "http://example.com/2023/09/15/oom-help/",
            "url": "http://example.com/2023/09/15/oom-help/",
            "title": "快速定位OOM问题",
            "date_published": "2023-09-15T13:38:44.000Z",
            "content_html": "<h2 id=\"oom的原因\"><a class=\"markdownIt-Anchor\" href=\"#oom的原因\">#</a> OOM 的原因</h2>\n<h3 id=\"申请了大量的对象\"><a class=\"markdownIt-Anchor\" href=\"#申请了大量的对象\">#</a> 申请了大量的对象</h3>\n<p>写查询语句，不加 limit, 直接查到全表了</p>\n<pre><code>&lt;select&gt;\n    select id, name, .... from user\n    &lt;where&gt;\n        &lt;if test&#x3D;&#39;name !&#x3D;null &amp;&amp; name!&#x3D;&#39;&#39;&#39;&gt;\n            name &#x3D; #{name}\n        &lt;&#x2F;if&gt;\n    &lt;&#x2F;where&gt;\n&lt;&#x2F;select&gt;</code></pre>\n<p>当 name 等于 null 或者空字符串时，直接变成了查全表，有条军规就是查询必加 limit</p>\n<h3 id=\"内存用尽-资源不释放\"><a class=\"markdownIt-Anchor\" href=\"#内存用尽-资源不释放\">#</a> 内存用尽，资源不释放</h3>\n<p>Map 一直存，不做容量控制。定时任务最常见，要么是忘了 clear (), 要么就是没有设置 lru 之类的淘汰算法.<br>\n 还有就是 IO 对象不释放，记得调用 close () 呀<br>\n文件的话，记得调用 close (), 或者用 try-resource 语法糖<br>\n如果是连接对象的话，可以用连接池，保证下限</p>\n<h3 id=\"服务器内存真的低\"><a class=\"markdownIt-Anchor\" href=\"#服务器内存真的低\">#</a> 服务器内存真的低</h3>\n<p>我们的开发环境，单台只给了 16G, 感觉数据多一点，就卡的不行<br>\n可以用命令看下当前 堆的状态</p>\n<pre><code>\njmap -heap</code></pre>\n<h2 id=\"定位方法\"><a class=\"markdownIt-Anchor\" href=\"#定位方法\">#</a> 定位方法</h2>\n<h3 id=\"先看一眼-当前已经有的日志文件-业务日志和gc日志\"><a class=\"markdownIt-Anchor\" href=\"#先看一眼-当前已经有的日志文件-业务日志和gc日志\">#</a> 先看一眼 当前已经有的日志文件，业务日志和 GC 日志</h3>\n<p>先估摸的看下，OOM 出现，一般都是话务量场景，有大量请求，这第一点属于是能看出来就好，看不来就算了</p>\n<h3 id=\"分析dump文件\"><a class=\"markdownIt-Anchor\" href=\"#分析dump文件\">#</a> 分析 dump 文件</h3>\n<p>为啥没有优先用这个方法呢，因为现网都是 jre, 没有 jdk, 一般也咩有加上堆转储的启动参数，没有现成的 dump 文件<br>\n这里分两种情况</p>\n<ol>\n<li>开启了堆转储参数，且 oom 已发生，这时候 JVM 会自动给生成 dump 文件 <pre><code> \njava -XX:+HeapDumpOnOutOfMemoryError \n -XX:HeapDumpPath&#x3D;~&#x2F;dumps&#x2F;java_heapdump.hprof\n -jar test.jar\n-XX:+HeapDumpOnOutOfMemoryError：当发生OutOfMemoryError时，生成堆转储文件。\n-XX:HeapDumpPath&#x3D;~&#x2F;dumps&#x2F;java_heapdump.hprof\n </code></pre>\n</li>\n<li>没有开启堆转储参数，那只能用命令了 <pre><code>jmap -dump:format&#x3D;b,file&#x3D;test.hprof 1234\njamp -dump:format&#x3D;b,file&#x3D;[文件名] [pid]\npid 用jsp 或者 ps -ef | grep java</code></pre>\n</li>\n</ol>\n<h2 id=\"dump文件分析\"><a class=\"markdownIt-Anchor\" href=\"#dump文件分析\">#</a> dump 文件分析</h2>\n<p>说实话挺简单的，把 dump 文件下载到本地，用 visualvm 载入，就看哪个类占用最多就可以了，排除掉 char [] 和 String<br>\n 如果程序里面咩有用自定义类，而全用 Map 的，可以动手打人了，所以说有条军规就是让别用 Map 来，弄贼多魔法值 Key, 维护和定位都麻烦.<br>\nMap 的情况真的很难定位，排除 Map</p>\n",
            "tags": [
                "java",
                "定位"
            ]
        },
        {
            "id": "http://example.com/2023/08/15/docker-install-mysql-redis-rebabitMQ/",
            "url": "http://example.com/2023/08/15/docker-install-mysql-redis-rebabitMQ/",
            "title": "docker-install-mysql-redis-rebabitMQ",
            "date_published": "2023-08-15T01:48:39.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>本文将指导您如何在 Windows 系统上安装 Docker, 并使用 Docker 来运行 Redis 容器。这种方法比直接在 Windows 上安装 Redis 更加简单和灵活。</p>\n<h2 id=\"安装docker-desktop-for-windows\"><a class=\"markdownIt-Anchor\" href=\"#安装docker-desktop-for-windows\">#</a> 安装 Docker Desktop for Windows</h2>\n<ol>\n<li>\n<p>系统要求:</p>\n<ul>\n<li>Windows 10 64 位: Pro, Enterprise 或 Education (Build 16299 或更高版本)</li>\n<li>启用 Hyper-V 和容器功能</li>\n</ul>\n</li>\n<li>\n<p>下载 Docker Desktop:</p>\n<ul>\n<li>访问 <a href=\"https://www.docker.com/products/docker-desktop\">Docker 官网</a></li>\n<li>点击 &quot;Download for Windows&quot; 下载安装程序</li>\n</ul>\n</li>\n<li>\n<p>安装步骤:</p>\n<ul>\n<li>双击下载的安装文件</li>\n<li>按照安装向导的提示进行安装</li>\n<li>安装完成后，重启电脑</li>\n</ul>\n</li>\n<li>\n<p>验证安装:</p>\n<ul>\n<li>打开命令提示符或 PowerShell</li>\n<li>运行  <code>docker --version</code>  检查 Docker 是否正确安装</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"使用docker运行redis\"><a class=\"markdownIt-Anchor\" href=\"#使用docker运行redis\">#</a> 使用 Docker 运行 Redis</h2>\n<ol>\n<li>\n<p>拉取 Redis 镜像:</p>\n<pre><code>docker pull redis\n</code></pre>\n</li>\n<li>\n<p>运行 Redis 容器:</p>\n<pre><code>docker run --name my-redis -p 6379:6379 -d redis\n</code></pre>\n<p>这条命令会创建一个名为 &quot;my-redis&quot; 的容器，并将容器的 6379 端口映射到主机的 6379 端口。</p>\n</li>\n<li>\n<p>验证 Redis 是否运行:</p>\n<pre><code>docker ps\n</code></pre>\n<p>你应该能看到一个名为 &quot;my-redis&quot; 的容器正在运行。</p>\n</li>\n<li>\n<p>连接到 Redis:</p>\n<ul>\n<li>使用 Redis 命令行客户端:<pre><code>docker exec -it my-redis redis-cli\n</code></pre>\n</li>\n<li>或者使用其他 Redis 客户端工具，连接到 localhost:6379</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"管理redis容器\"><a class=\"markdownIt-Anchor\" href=\"#管理redis容器\">#</a> 管理 Redis 容器</h2>\n<ul>\n<li>停止容器:  <code>docker stop my-redis</code></li>\n<li>启动容器:  <code>docker start my-redis</code></li>\n<li>重启容器:  <code>docker restart my-redis</code></li>\n<li>删除容器:  <code>docker rm my-redis</code>  (需要先停止容器)</li>\n</ul>\n<h2 id=\"配置redis持久化\"><a class=\"markdownIt-Anchor\" href=\"#配置redis持久化\">#</a> 配置 Redis 持久化</h2>\n<p>如果你需要 Redis 数据持久化，可以使用以下命令创建容器:</p>\n<pre><code>docker run --name my-redis -p 6379:6379 -v /path/to/local/data:/data -d redis redis-server --appendonly yes\n</code></pre>\n<p>这会将 Redis 数据保存在指定的本地目录中。</p>\n<h2 id=\"结语\"><a class=\"markdownIt-Anchor\" href=\"#结语\">#</a> 结语</h2>\n<p>通过 Docker 运行 Redis, 我们可以轻松地在 Windows 上使用这个强大的内存数据库，而无需担心复杂的安装和配置过程。希望这个指南能帮助你顺利地在 Windows 上设置 Docker 和 Redis 环境。</p>\n",
            "tags": [
                "Docker",
                "Redis",
                "Windows",
                "安装教程"
            ]
        },
        {
            "id": "http://example.com/2023/05/23/%E5%B7%A5%E5%85%B7-%E5%A5%BD%E7%94%A8%E7%9A%84github%E9%95%9C%E5%83%8F%E7%AB%99/",
            "url": "http://example.com/2023/05/23/%E5%B7%A5%E5%85%B7-%E5%A5%BD%E7%94%A8%E7%9A%84github%E9%95%9C%E5%83%8F%E7%AB%99/",
            "title": "[工具] 好用的github镜像站(持续更新)",
            "date_published": "2023-05-23T13:16:55.000Z",
            "content_html": "<h2 id=\"github镜像站\"><a class=\"markdownIt-Anchor\" href=\"#github镜像站\">#</a> github 镜像站</h2>\n<h3 id=\"下载\"><a class=\"markdownIt-Anchor\" href=\"#下载\">#</a> 下载</h3>\n<p><a href=\"https://521github.com\">https://521github.com</a><br>\n 这个真的快</p>\n<h3 id=\"clone\"><a class=\"markdownIt-Anchor\" href=\"#clone\">#</a> clone</h3>\n<p><a href=\"https://gitclone.com\">https://gitclone.com</a></p>\n",
            "tags": [
                "工具",
                "github"
            ]
        },
        {
            "id": "http://example.com/2023/05/20/%E5%AE%9A%E4%BD%8D-%E5%BA%94%E7%94%A8%E9%A2%91%E7%B9%81FGC/",
            "url": "http://example.com/2023/05/20/%E5%AE%9A%E4%BD%8D-%E5%BA%94%E7%94%A8%E9%A2%91%E7%B9%81FGC/",
            "title": "定位和解决应用频繁Full GC问题",
            "date_published": "2023-05-20T13:17:01.000Z",
            "content_html": "<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\">#</a> 背景</h2>\n<p>在话务量环境中，我们发现接口响应变慢。由于该环境中运行着多种业务，难以直接判断是哪个业务引发了这个问题。因此，我们需要进行深入的性能分析和问题定位。</p>\n<h2 id=\"问题定位过程\"><a class=\"markdownIt-Anchor\" href=\"#问题定位过程\">#</a> 问题定位过程</h2>\n<h3 id=\"1-使用jstat观察垃圾收集情况\"><a class=\"markdownIt-Anchor\" href=\"#1-使用jstat观察垃圾收集情况\">#</a> 1. 使用 jstat 观察垃圾收集情况</h3>\n<p>首先，我们使用 <code>jstat -gcutil</code>  命令查看垃圾收集的情况。观察结果显示：</p>\n<ul>\n<li>老年代使用率较高</li>\n<li>GC 次数和时间明显偏多</li>\n</ul>\n<p>这些迹象表明系统可能正在频繁进行 Full GC。</p>\n<h3 id=\"2-使用jmap分析堆内存\"><a class=\"markdownIt-Anchor\" href=\"#2-使用jmap分析堆内存\">#</a> 2. 使用 jmap 分析堆内存</h3>\n<p>接下来，我们使用 <code>jmap -heap &lt;pid&gt;</code>  命令查看堆内存使用情况，发现内存使用量确实很高。</p>\n<p>为了进一步分析，我们执行了以下步骤：</p>\n<ol>\n<li>手动触发一次 Full GC： <code>jmap -histo:live &lt;pid&gt;</code></li>\n<li>再次执行 <code>jmap -heap &lt;pid&gt;</code>  查看堆内存情况</li>\n</ol>\n<p>执行完后，再执行 <code>jmap -heap &lt;pid&gt;</code> ，没有发现明显变化。</p>\n<p>这时我们推测，JVM 中可能没有多少可回收的垃圾，问题可能出在某个业务模块使用了大量缓存（如 Map 等数据结构）。不过，这个结论还不够确定，因为 <code>jmap -histo:live</code>  的结果可能受到正在执行的线程影响，这一步得出的结论还不足以定位出具体是哪一块的问题。</p>\n<h3 id=\"3-分析堆转储文件\"><a class=\"markdownIt-Anchor\" href=\"#3-分析堆转储文件\">#</a> 3. 分析堆转储文件</h3>\n<p>为了获得更详细的信息，我们决定生成堆转储文件进行分析：</p>\n<pre><code>jmap -dump:format=b,file=/home/xxx/sch/my.dump &lt;pid&gt;\n</code></pre>\n<p>我们使用 VisualVM 分析 dump 文件（也可以使用 MAT）。分析结果显示：</p>\n<ul>\n<li><code>String</code>  对象数量异常多</li>\n<li><code>SimpleMessage</code>  对象数量异常多</li>\n<li><code>LinkedBlockingQueue$Node</code>  对象数量异常多</li>\n</ul>\n<p>通过代码审查，我们发现这些对象与线程池的任务队列有关。进一步分析发现：</p>\n<ol>\n<li>使用了无界队列</li>\n<li>消费速度跟不上生产速度</li>\n<li>队列中积压了大量任务，从而触发频繁的 Full GC</li>\n</ol>\n<p>我们意识到，如果继续这样下去，很可能会导致 OutOfMemoryError。</p>\n<h2 id=\"解决方案\"><a class=\"markdownIt-Anchor\" href=\"#解决方案\">#</a> 解决方案</h2>\n<p>问题定位后，我们考虑了以下解决方案：</p>\n<ol>\n<li>\n<p>修改队列类型：考虑到原设计可能有其合理性，我们暂时没有采取这个方案。</p>\n</li>\n<li>\n<p>优化任务处理逻辑：</p>\n<ul>\n<li>将原来使用 <code>synchronized</code>  的地方改为使用 <code>Lock</code> ，降低锁的粒度。</li>\n<li>实现批量处理逻辑：当队列中任务数量超过阈值时，启用批量处理模式，提高处理效率。</li>\n</ul>\n</li>\n</ol>\n<p>实施步骤：</p>\n<ol>\n<li>我们首先在话务量环境中部署了第一个优化方案（使用 <code>Lock</code>  替换 <code>synchronized</code> ）。</li>\n<li>验证没有问题后，这解决了紧急情况。</li>\n<li>随后，我们又实现并部署了批量处理的优化，进一步提升了系统性能。</li>\n</ol>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>这次问题的解决过程展示了系统性能优化的一般步骤：</p>\n<ol>\n<li>发现问题：监控系统性能指标。</li>\n<li>初步分析：使用 JVM 工具如 <code>jstat</code>  和 <code>jmap</code>  快速定位可能的问题区域。</li>\n<li>深入分析：生成并分析堆转储文件，结合代码审查找出根本原因。</li>\n<li>制定方案：根据分析结果设计优化方案。</li>\n<li>逐步实施：先解决紧急问题，然后进行进一步的优化。</li>\n<li>持续监控：部署优化方案后继续监控系统，确保问题得到解决。</li>\n</ol>\n",
            "tags": [
                "java",
                "定位",
                "JVM",
                "性能优化",
                "垃圾回收"
            ]
        },
        {
            "id": "http://example.com/2023/01/26/int-tinyint/",
            "url": "http://example.com/2023/01/26/int-tinyint/",
            "title": "mysql 无符号数值类型与JAVA数值类型映射问题",
            "date_published": "2023-01-26T14:33:42.000Z",
            "content_html": "<p>mysql 无符号数值类型与 JAVA 数值类型映射问题</p>\n<h3 id=\"起因\"><a class=\"markdownIt-Anchor\" href=\"#起因\">#</a> 起因</h3>\n<p>之前忙着弄的项目 1.0, 准备迁移到 2.0 了，需要专门做数据迁移，正好活也分了一部分过来，遇到问题，一个预期返回值类型为 Integer 的值，实际返回了 Long 类型回来，导致结果映射错误，一开始感觉没有道理呀，开发环境没有遇上呀，为啥测试环境能出这个问题，登上测试环境，一看数据库 这个字段 类型 是 int unsigned, 开发环境这个字段是 tinyint unsigned</p>\n<h3 id=\"定位\"><a class=\"markdownIt-Anchor\" href=\"#定位\">#</a> 定位</h3>\n<p>开发环境和测试环境，数据表字段类型不一致，估摸就是升级脚本有问题，我们开发环境一般都是直接新装，测试环境都一直升级，查了一下升级脚本，果然是升级脚本的问题<br>\n建表语句给定的类型是</p>\n<pre><code>tinyint unsigned</code></pre>\n<p>而升级脚本里面给定的类型是</p>\n<pre><code>int unsigned</code></pre>\n<p>在 Java 中，无符号数值并没有直接的原生类型支持. Java 的整数类型（byte, short, int, long）都是有符号的，int unsigned 最大值已经超过 Integer 最大值了，只能用 Long 接收，这次使用的是 JdbcTemplate, 其他的 ORM 框架还没试过，不过其他 ORM 框架都是基于 jdbc 开发，结果也应该是一样的</p>\n<h3 id=\"感想\"><a class=\"markdownIt-Anchor\" href=\"#感想\">#</a> 感想</h3>\n<p>真的少用 unsigned , 和 JAVA 不太搭，容易给别人埋坑</p>\n",
            "tags": [
                "mysql",
                "java"
            ]
        },
        {
            "id": "http://example.com/2022/08/10/diypc/",
            "url": "http://example.com/2022/08/10/diypc/",
            "title": "记10年来, 再度DIY主机",
            "date_published": "2022-08-10T14:31:14.000Z",
            "content_html": "<h2 id=\"原因\"><a class=\"markdownIt-Anchor\" href=\"#原因\">#</a> 原因</h2>\n<p>我的笔记本 2015 年买的，已经用了快 7 年了，终于凉了，不得不搞一台电脑来用，上一次自己装机好像都过了 10 年了.</p>\n<h2 id=\"平台选择\"><a class=\"markdownIt-Anchor\" href=\"#平台选择\">#</a> 平台选择</h2>\n<p>平台也就两种可选择，AMD or Intel, AMD 一直都没接触过，不太敢碰，Intel 摸过 G502 Q6600 I3-3240,<br>\n 感觉还是对 Intel 更熟悉一些，而且 Intel 核显不阉割核心，我也没玩什么单机游戏，就玩玩 LOL, 暂时用核显应该也是够用的</p>\n<h2 id=\"cpu\"><a class=\"markdownIt-Anchor\" href=\"#cpu\">#</a> CPU</h2>\n<p>CPU 没啥说的 12 代相较于 11 代提升还是很大的，来看下规格</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">型号</th>\n<th style=\"text-align:center\">核心<br/>线程数</th>\n<th style=\"text-align:center\">P-Core 频率 </th>\n<th style=\"text-align:center\">E-Core 频率</th>\n<th style=\"text-align:center\">L3 缓存</th>\n<th style=\"text-align:center\">功耗</th>\n<th style=\"text-align:center\">内存速度</th>\n<th style=\"text-align:center\">核显</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Core i9-1290<br/>Core i9-12900KF</td>\n<td style=\"text-align:center\">8P+8E/24</td>\n<td style=\"text-align:center\">3.2/5.2 GHz</td>\n<td style=\"text-align:center\">2.4/3.9 GHz</td>\n<td style=\"text-align:center\">30MB</td>\n<td style=\"text-align:center\">241/125W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 770 N/A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i9-12900<br/>Core i9-12900F</td>\n<td style=\"text-align:center\">8P+8E/24</td>\n<td style=\"text-align:center\">2.4/5.1 GHz</td>\n<td style=\"text-align:center\">1.8/3.8 GHz</td>\n<td style=\"text-align:center\">30MB</td>\n<td style=\"text-align:center\">202/65W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 770 N/A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i9-12900T</td>\n<td style=\"text-align:center\">8P+8E/24</td>\n<td style=\"text-align:center\">1.4/4.9 GHz</td>\n<td style=\"text-align:center\">1.0/3.6 GHz</td>\n<td style=\"text-align:center\">30MB</td>\n<td style=\"text-align:center\">106/35W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 770</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i7-12700K<br/>Core i7-12700KF</td>\n<td style=\"text-align:center\">8P+4E/20</td>\n<td style=\"text-align:center\">3.6/5.0 GHz</td>\n<td style=\"text-align:center\">2.7/3.8 GHz</td>\n<td style=\"text-align:center\">25MB</td>\n<td style=\"text-align:center\">190/125W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 770 N/A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i7-12700<br/>Core i7-12700F</td>\n<td style=\"text-align:center\">8P+4E/20</td>\n<td style=\"text-align:center\">2.1/4.9 GHz</td>\n<td style=\"text-align:center\">1.6/3.6 GHz</td>\n<td style=\"text-align:center\">25MB</td>\n<td style=\"text-align:center\">180/65W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 770 N/A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i7-12700T</td>\n<td style=\"text-align:center\">8P+4E/20</td>\n<td style=\"text-align:center\">1.4/4.7 GHz</td>\n<td style=\"text-align:center\">1.0/3.4 GHz</td>\n<td style=\"text-align:center\">25MB</td>\n<td style=\"text-align:center\">99/35W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 770</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i5-12600K<br/>Core i5-12600KF</td>\n<td style=\"text-align:center\">6P+4E/16</td>\n<td style=\"text-align:center\">3.7/4.9 GHz</td>\n<td style=\"text-align:center\">2.8/3.6 GHz</td>\n<td style=\"text-align:center\">20MB</td>\n<td style=\"text-align:center\">150/125W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 770 N/A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i5-12600</td>\n<td style=\"text-align:center\">6P+0E/12</td>\n<td style=\"text-align:center\">3.3/4.8 GHz</td>\n<td style=\"text-align:center\">N/A</td>\n<td style=\"text-align:center\">18MB</td>\n<td style=\"text-align:center\">117/65W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 770</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i5-12600T</td>\n<td style=\"text-align:center\">6P+0E/12</td>\n<td style=\"text-align:center\">2.1/4.6 GHz</td>\n<td style=\"text-align:center\">N/A</td>\n<td style=\"text-align:center\">18MB</td>\n<td style=\"text-align:center\">74/35W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 770</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i5-12500</td>\n<td style=\"text-align:center\">6P+0E/12</td>\n<td style=\"text-align:center\">3.0/4.6 GHz</td>\n<td style=\"text-align:center\">N/A</td>\n<td style=\"text-align:center\">18MB</td>\n<td style=\"text-align:center\">117/65W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 770</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i5-12500T</td>\n<td style=\"text-align:center\">6P+0E/12</td>\n<td style=\"text-align:center\">2.0/4.4 GHz</td>\n<td style=\"text-align:center\">N/A</td>\n<td style=\"text-align:center\">18MB</td>\n<td style=\"text-align:center\">74/35W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 770</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i5-12400<br/>Core i5-12400F</td>\n<td style=\"text-align:center\">6P+0E/12</td>\n<td style=\"text-align:center\">2.5/4.4 GHz</td>\n<td style=\"text-align:center\">N/A</td>\n<td style=\"text-align:center\">18MB</td>\n<td style=\"text-align:center\">117/65W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 730 N/A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i5-12400T</td>\n<td style=\"text-align:center\">6P+0E/12</td>\n<td style=\"text-align:center\">1.8/4.2 GHz</td>\n<td style=\"text-align:center\">N/A</td>\n<td style=\"text-align:center\">18MB</td>\n<td style=\"text-align:center\">74/35W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 730</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i3-12300</td>\n<td style=\"text-align:center\">4P+0E/8</td>\n<td style=\"text-align:center\">3.3/4.3 GHz</td>\n<td style=\"text-align:center\">N/A</td>\n<td style=\"text-align:center\">12MB</td>\n<td style=\"text-align:center\">89/60W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 730</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i3-12300T</td>\n<td style=\"text-align:center\">4P+0E/8</td>\n<td style=\"text-align:center\">2.3/4.2 GHz</td>\n<td style=\"text-align:center\">N/A</td>\n<td style=\"text-align:center\">12MB</td>\n<td style=\"text-align:center\">69/35W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 730</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i3-12100<br/>Core i3-12100F</td>\n<td style=\"text-align:center\">4P+0E/8</td>\n<td style=\"text-align:center\">3.3/4.3 GHz</td>\n<td style=\"text-align:center\">N/A</td>\n<td style=\"text-align:center\">12MB</td>\n<td style=\"text-align:center\">89/60W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 730</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Core i3-12100T</td>\n<td style=\"text-align:center\">4P+0E/8</td>\n<td style=\"text-align:center\">2.2/4.1 GHz</td>\n<td style=\"text-align:center\">N/A</td>\n<td style=\"text-align:center\">12MB</td>\n<td style=\"text-align:center\">69/35W</td>\n<td style=\"text-align:center\">DDR5-4800 DDR4-3200</td>\n<td style=\"text-align:center\">UHD 730</td>\n</tr>\n</tbody>\n</table>\n<p>虽然这上面看着很多，真正方便买到的，只有 12100 12400 12600 12700<br>\n12100 只有四核心，12600 12700 又太贵了，12400 和 12600 都是 6 大核，12600 也只是多了四个小核，12400 就是主频不如 12600, 不能超内存，其他的都还好</p>\n<h2 id=\"主板\"><a class=\"markdownIt-Anchor\" href=\"#主板\">#</a> 主板</h2>\n<p>主板选择上，H610 B660, 我选择了微星的 B660M 迫击炮 DDR4 WIFI 版本，方便以后升级，选 DDR4 的版本，主要是 D4 的条子比较便宜 D5 的都还挺贵的. wifi 很重要，租的房子里面拉网线到卧室很麻烦.</p>\n<h2 id=\"机箱\"><a class=\"markdownIt-Anchor\" href=\"#机箱\">#</a> 机箱</h2>\n<p>机箱，我看了不少了，一开始想上 ITX 的，但是感觉自己不是很会装机，理线也不会，还是放弃 ITX, 从 MATX 机箱里面找，瞧中了乔思伯 D30, 选的白色版本，银色顶盖是黑色的，害，要是银色的应该也是白色，我应该就买银色了</p>\n<h2 id=\"电源\"><a class=\"markdownIt-Anchor\" href=\"#电源\">#</a> 电源</h2>\n<p>电源是顺带买机箱的时候，一起在京东上面买的，海韵 CORE GX650, 650W 应该是够了的，买来装机的时候发现，线材超级硬，插线真是苦了我</p>\n<h2 id=\"内存\"><a class=\"markdownIt-Anchor\" href=\"#内存\">#</a> 内存</h2>\n<p>因为 12400 D4 不能超频，默认最高就 3200, 所以我指的最便宜的买，也是在京东上面买的 光威天策 3200 16G*2</p>\n<h3 id=\"超频\"><a class=\"markdownIt-Anchor\" href=\"#超频\">#</a> 超频</h3>\n<p>试了一下内存超频，只能超到 3500 c18<br>\n12400 SA 电压有 0.981V 看了颗粒 垃圾玩意，干</p>\n<h2 id=\"散热器\"><a class=\"markdownIt-Anchor\" href=\"#散热器\">#</a> 散热器</h2>\n<p>咸鱼上面淘了个 PA120 6 热管的，装机的时候，后悔了，很大，机箱又不是 ATX, 很难装，没有足够长的螺丝刀，拧螺丝很麻烦</p>\n<h2 id=\"硬盘\"><a class=\"markdownIt-Anchor\" href=\"#硬盘\">#</a> 硬盘</h2>\n<p>硬盘，我选的 PM981A 这个是三星 980pro 的 OEM 版本，性能很强 512G 系统盘够了</p>\n<h3 id=\"20220822-加装机械硬盘\"><a class=\"markdownIt-Anchor\" href=\"#20220822-加装机械硬盘\">#</a> 20220822 加装机械硬盘</h3>\n<p>买了块海康威视 希捷监控盘 4T<br>\n 型号 ST4000VX015-3CU104, 挺不错的，也学会用 qbittorrent 了，可以用来下载动漫</p>\n<h3 id=\"20221210-加装固态硬盘\"><a class=\"markdownIt-Anchor\" href=\"#20221210-加装固态硬盘\">#</a> 20221210 加装固态硬盘</h3>\n<p>最近致钛很火呀，又便宜，支持国产<br>\n型号 ZHITAI TiPlus5000 只花了 414, 用了 99 元的拼多多券</p>\n<h2 id=\"机箱风扇\"><a class=\"markdownIt-Anchor\" href=\"#机箱风扇\">#</a> 机箱风扇</h2>\n<p>风扇也是在咸鱼上面买的，5 把工包利民 3 正 2 反，还有 ARGB 极速 1500</p>\n<h2 id=\"遇到的麻烦\"><a class=\"markdownIt-Anchor\" href=\"#遇到的麻烦\">#</a> 遇到的麻烦</h2>\n<ol>\n<li>电源的线材很硬，非常难插</li>\n<li>散热器很大，没办法先装在主板上，不然我拧不到主板的螺丝，装上主板后，再装散热器双塔也很深，我还是不容易拧到散热器螺丝 (螺丝刀太短了)</li>\n<li>5 把风扇，很难接线，3 把出风的扇子，我接的水泵的，两把底部入风，我接的系统风扇，插线很麻烦</li>\n<li>装完风扇后，再装跳线，难得要死</li>\n</ol>\n<h2 id=\"下一次装机\"><a class=\"markdownIt-Anchor\" href=\"#下一次装机\">#</a> 下一次装机</h2>\n<p>换水冷吧，风冷感觉好麻烦<br>\n电源线材用软一点的，有那种带编织线的<br>\n电源可以最后装的的，因为电源连主板的线，只有 CPU 和 24pin 主板线，最后装应该很轻松<br>\n机箱 D30 感觉背部空间好少，本来想把多出来的线都移到后面的，放不下，只能都堆到前面来</p>\n",
            "tags": [
                "diy",
                "pc"
            ]
        },
        {
            "id": "http://example.com/2021/04/07/sql-max-method/",
            "url": "http://example.com/2021/04/07/sql-max-method/",
            "title": "验证码设计及mysql max函数",
            "date_published": "2021-04-07T14:28:51.000Z",
            "content_html": "<h2 id=\"起因\"><a class=\"markdownIt-Anchor\" href=\"#起因\">#</a> 起因</h2>\n<p>事情是这样的，一线有反馈存在验证码的问题，频率为偶现，接到反馈后，我还有点懵，有问题就有问题嘛，还是偶现问题</p>\n<h2 id=\"定位\"><a class=\"markdownIt-Anchor\" href=\"#定位\">#</a> 定位</h2>\n<p>我先自己测试环境试了一下，连着 10 个验证码都没有这个问题，又到生产环境试了 10 个，也没有这个问题，哦嗬，那没法了，问题没法复现，那先看下日志吧，问了一下一线的同事，没给啥信息出来，那就只能代码走读了，然后就一层一层网上扒，一阵看下来，发现这个 查询验证码的 sql 问题很大</p>\n<pre><code>select max(id), verifyCode, used, phoneNumber, creteTime ...\nfrom sms where verifyCode &#x3D;  limit 1;</code></pre>\n<p>max 函数只对结果集的对应参数列有效，和其他列无关系，这个 sql 查询到的结果<br>\n只能查询到 verifyCode 对应最早的一条数据，这样的问题居然到我这里才爆出来，运气挺好<br>\n 6 位的验证码，也就是这种实现逻辑下，只有 899999 个有效值，哈哈哈，应该还是当初代码检视太随意了</p>\n<h2 id=\"解决方案\"><a class=\"markdownIt-Anchor\" href=\"#解决方案\">#</a> 解决方案</h2>\n<h3 id=\"方案一\"><a class=\"markdownIt-Anchor\" href=\"#方案一\">#</a> 方案一</h3>\n<p>直接修改这个 sql, max 函数一点作用都没有<br>\n修改为</p>\n<pre><code>select id, verifyCode, used, phoneNumber, creteTime ...\nfrom sms where verifyCode &#x3D;  order by id desc limit 1;</code></pre>\n<p>这种方式简单，不需要其他中间件，改起来也快，但是不太容易扩展</p>\n<h3 id=\"方案二\"><a class=\"markdownIt-Anchor\" href=\"#方案二\">#</a> 方案二</h3>\n<p>借用 redis, key 自带过期时间的，能查询到就代表有效，之前的设计里面，还分为 无效验证码和过期验证码，真没必要，纯粹只有无效验证码</p>\n",
            "tags": [
                "mysql"
            ]
        },
        {
            "id": "http://example.com/2021/04/05/%E6%82%A0%E5%93%89%E6%97%A5%E5%B8%B8%E5%A4%A7%E7%8E%8B%E5%AE%8C%E7%BB%93/",
            "url": "http://example.com/2021/04/05/%E6%82%A0%E5%93%89%E6%97%A5%E5%B8%B8%E5%A4%A7%E7%8E%8B%E5%AE%8C%E7%BB%93/",
            "title": "日常的终结，回忆的开始",
            "date_published": "2021-04-05T12:56:00.000Z",
            "content_html": "<h1 id=\"第一次看的时候还是高中生-完结时-竟已成社会人\"><a class=\"markdownIt-Anchor\" href=\"#第一次看的时候还是高中生-完结时-竟已成社会人\">#</a> 第一次看的时候还是高中生，完结时，竟已成社会人</h1>\n<h1 id=\"时间过得很快青春就那么短暂\"><a class=\"markdownIt-Anchor\" href=\"#时间过得很快青春就那么短暂\">#</a> 时间过得很快，青春就那么短暂</h1>\n<img loading=\"lazy\" data-src=\"/2021/04/05/%E6%82%A0%E5%93%89%E6%97%A5%E5%B8%B8%E5%A4%A7%E7%8E%8B%E5%AE%8C%E7%BB%93/10010.avif\" class=\"\">",
            "tags": [
                "日常",
                "动漫"
            ]
        }
    ]
}